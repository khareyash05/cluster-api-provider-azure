/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: ../interfaces.go

// Package mock_aso is a generated GoMock package.
package mock_aso

import (
	context "context"
	reflect "reflect"

	genruntime "github.com/Azure/azure-service-operator/v2/pkg/genruntime"
	gomock "github.com/golang/mock/gomock"
	v1beta1 "sigs.k8s.io/cluster-api-provider-azure/api/v1beta1"
	azure "sigs.k8s.io/cluster-api-provider-azure/azure"
)

// MockReconciler is a mock of Reconciler interface.
type MockReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockReconcilerMockRecorder
}

// MockReconcilerMockRecorder is the mock recorder for MockReconciler.
type MockReconcilerMockRecorder struct {
	mock *MockReconciler
}

// NewMockReconciler creates a new mock instance.
func NewMockReconciler(ctrl *gomock.Controller) *MockReconciler {
	mock := &MockReconciler{ctrl: ctrl}
	mock.recorder = &MockReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReconciler) EXPECT() *MockReconcilerMockRecorder {
	return m.recorder
}

// CreateOrUpdateResource mocks base method.
func (m *MockReconciler) CreateOrUpdateResource(ctx context.Context, spec azure.ASOResourceSpecGetter, serviceName string) (genruntime.MetaObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateResource", ctx, spec, serviceName)
	ret0, _ := ret[0].(genruntime.MetaObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateResource indicates an expected call of CreateOrUpdateResource.
func (mr *MockReconcilerMockRecorder) CreateOrUpdateResource(ctx, spec, serviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateResource", reflect.TypeOf((*MockReconciler)(nil).CreateOrUpdateResource), ctx, spec, serviceName)
}

// DeleteResource mocks base method.
func (m *MockReconciler) DeleteResource(ctx context.Context, spec azure.ASOResourceSpecGetter, serviceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResource", ctx, spec, serviceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResource indicates an expected call of DeleteResource.
func (mr *MockReconcilerMockRecorder) DeleteResource(ctx, spec, serviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResource", reflect.TypeOf((*MockReconciler)(nil).DeleteResource), ctx, spec, serviceName)
}

// MockTagsGetterSetter is a mock of TagsGetterSetter interface.
type MockTagsGetterSetter struct {
	ctrl     *gomock.Controller
	recorder *MockTagsGetterSetterMockRecorder
}

// MockTagsGetterSetterMockRecorder is the mock recorder for MockTagsGetterSetter.
type MockTagsGetterSetterMockRecorder struct {
	mock *MockTagsGetterSetter
}

// NewMockTagsGetterSetter creates a new mock instance.
func NewMockTagsGetterSetter(ctrl *gomock.Controller) *MockTagsGetterSetter {
	mock := &MockTagsGetterSetter{ctrl: ctrl}
	mock.recorder = &MockTagsGetterSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagsGetterSetter) EXPECT() *MockTagsGetterSetterMockRecorder {
	return m.recorder
}

// GetActualTags mocks base method.
func (m *MockTagsGetterSetter) GetActualTags(resource genruntime.MetaObject) v1beta1.Tags {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActualTags", resource)
	ret0, _ := ret[0].(v1beta1.Tags)
	return ret0
}

// GetActualTags indicates an expected call of GetActualTags.
func (mr *MockTagsGetterSetterMockRecorder) GetActualTags(resource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActualTags", reflect.TypeOf((*MockTagsGetterSetter)(nil).GetActualTags), resource)
}

// GetAdditionalTags mocks base method.
func (m *MockTagsGetterSetter) GetAdditionalTags() v1beta1.Tags {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdditionalTags")
	ret0, _ := ret[0].(v1beta1.Tags)
	return ret0
}

// GetAdditionalTags indicates an expected call of GetAdditionalTags.
func (mr *MockTagsGetterSetterMockRecorder) GetAdditionalTags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdditionalTags", reflect.TypeOf((*MockTagsGetterSetter)(nil).GetAdditionalTags))
}

// GetDesiredTags mocks base method.
func (m *MockTagsGetterSetter) GetDesiredTags(resource genruntime.MetaObject) v1beta1.Tags {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDesiredTags", resource)
	ret0, _ := ret[0].(v1beta1.Tags)
	return ret0
}

// GetDesiredTags indicates an expected call of GetDesiredTags.
func (mr *MockTagsGetterSetterMockRecorder) GetDesiredTags(resource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDesiredTags", reflect.TypeOf((*MockTagsGetterSetter)(nil).GetDesiredTags), resource)
}

// SetTags mocks base method.
func (m *MockTagsGetterSetter) SetTags(resource genruntime.MetaObject, tags v1beta1.Tags) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTags", resource, tags)
}

// SetTags indicates an expected call of SetTags.
func (mr *MockTagsGetterSetterMockRecorder) SetTags(resource, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTags", reflect.TypeOf((*MockTagsGetterSetter)(nil).SetTags), resource, tags)
}
